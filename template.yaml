AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  AWS Serverless Labstats API and Sync deployed via SAM, Serverless Application Model.

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Tags:
      Application: !Ref Application
      Program: !Ref Program
      Environment: !Ref Environment
    CodeUri: ./
    Runtime: java8
    MemorySize: 170
    Timeout: 120
Parameters:
  ParentVPCStack:
    Description: 'Stack name of the parent VPC stack template.'
    Default: ictdevawsvpc
    Type: String
  Application:
    Default: lbst
    Description: "The Application name, generally the Application Context from the SDDC."
    Type: String
    MaxLength: 4
    MinLength: 4
  Program:
    Default: Shared
    Type: String
  Environment:
    Default: C
    Description: "This is the environment (C, D, T or P)"
    Type: String
    AllowedValues: [C,D,T,P]
    ConstraintDescription: must specify C, D, T or P.
  LabStatsAPIKey:
    Default: "c120c47a-63cc-402c-9491-8fba2f66aa1f"
    Description: "This is the LabStats API Key"
    Type: String
Conditions:
  IsProd: !Equals [!Ref Environment, P]
Resources:
  ScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "ScheduledRule"
      # Schedule rule in UTC.
      ScheduleExpression: !If [IsProd, "rate(1 minute)", "cron(0 2 ? * MON-FRI *)"]
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt SyncFunction.Arn
          Id: "SyncFunction"
  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: "SyncFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ScheduledRule.Arn
  SyncFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Handler: edu.sydneyuni.myuni.LabStatsSync
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          LABSTATS_API_KEY: !Ref LabStatsAPIKey
          TABLE_NAME: !Ref DynamoDBTable
      Policies:
        - AWSLambdaExecute # Managed Policy
        - Version: '2012-10-17'
          Statement:
            - Sid: DynamoDBAccess
              Effect: Allow
              Action:
                - 'dynamodb:PutItem'
              Resource: !GetAtt DynamoDBTable.Arn
  GetFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Handler: edu.sydneyuni.myuni.RoomStationsQuery
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          TABLE_NAME: !Ref DynamoDBTable
      Policies:
        - AWSLambdaExecute # Managed Policy
        - Version: '2012-10-17'
          Statement:
            - Sid: DynamoDBAccess
              Effect: Allow
              Action:
                - 'dynamodb:Query'
              Resource: !GetAtt DynamoDBTable.Arn
      Events:
        HttpGet:
          Type: Api
          Properties:
            Path: '/room-stations'
            Method: GET
  GetFunctionApi:
    Type: AWS::Serverless::Api
    Properties:
      Cors: "'*'"
      StageName: !Ref Environment
      EndpointConfiguration: PRIVATE
      DefinitionBody:
        swagger: '2.0'
        info:
          version: '0.1'
          title: !Sub ${Application}-getlabstats
        schemes:
          - https
        paths:
          /room-stations:
            get:
              produces:
                - 'application/json'
              responses:
                '200':
                  description: '200 response'
                  schema:
                    $ref: '#/definitions/Empty'
              security:
                - api_key: []
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetFunction.Arn}/invocations'
                responses:
                  default:
                    statusCode: '200'
                httpMethod: POST
                type: aws_proxy
        securityDefinitions:
          api_key:
            type: apiKey
            name: x-api-key
            in: header
        x-amazon-apigateway-policy:
          Version: "2012-10-17"
          Statement:
            - Effect: 'Deny'
              Principal: '*'
              Action: 'execute-api:Invoke'
              Resource: '*'
              #!Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GetEventsJSONApi}/*'
              Condition:
                StringNotEquals:
                  aws:sourceVpce: 
                    'Fn::ImportValue': !Sub '${ParentVPCStack}-APIGEndpoint'
            - Effect: 'Allow'
              Principal: '*'
              Action: 'execute-api:Invoke'
              Resource: 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GetFunctionApi}/*'
              #arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GetIcalLinkApi}/*'
  GetFunctionApiKey: 
    Type: AWS::ApiGateway::ApiKey
    DependsOn: GetFunctionApiStage
    Properties: 
      Description: 'API key for GetFunction'
      Enabled: true
      StageKeys:
        - RestApiId: !Ref GetFunctionApi
          StageName: !Ref Environment
  GetFunctionUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn: GetFunctionApiStage
    Properties:
      ApiStages:
      - ApiId: !Ref GetFunctionApi
        Stage: !Ref Environment
      Description: GetFunction
  GetFunctionUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties : 
      KeyId: !Ref GetFunctionApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref GetFunctionUsagePlan
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: N
        - AttributeName: SyncDate
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
        - AttributeName: SyncDate
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Application
          Value: !Ref Application
        - Key: Program
          Value: !Ref Program
  DynamoDBScalingRole:
    Type: "AWS::IAM::Role"
    Condition: "IsProd"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "application-autoscaling.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:DescribeTable"
                  - "dynamodb:UpdateTable"
                  - "cloudwatch:PutMetricAlarm"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:GetMetricStatistics"
                  - "cloudwatch:SetAlarmState"
                  - "cloudwatch:DeleteAlarms"
                Resource: "*"
  DynamoDBReadCapacityScalableTarget:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    Condition: "IsProd"
    Properties:
      MaxCapacity: 50
      MinCapacity: 1
      ResourceId: !Sub "table/${DynamoDBTable}"
      RoleARN: !GetAtt DynamoDBScalingRole.Arn
      ScalableDimension: "dynamodb:table:ReadCapacityUnits"
      ServiceNamespace: dynamodb
  DynamoDBReadScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Condition: "IsProd"
    Properties:
      PolicyName: ReadAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref DynamoDBReadCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBReadCapacityUtilization
Outputs:
  SyncFunction:
    Description: "SyncFunction ARN"
    Value: !GetAtt SyncFunction.Arn
  GetFunction:
    Description: "GetFunction ARN"
    Value: !GetAtt GetFunction.Arn
  GetFunctionApiEndPoint:
    Description: 'Room Stations API Endpoint'
    Value: !Sub '${GetFunctionApi}.execute-api.${AWS::Region}.amazonaws.com'
    Export:
      Name: !Sub '${AWS::StackName}-GetFunctionApiEndPoint'
  DynamoDBTable:
    Description: "DynamoDB ARN"
    Value: !GetAtt DynamoDBTable.Arn
